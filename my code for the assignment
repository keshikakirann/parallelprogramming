#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <omp.h>

// Define constants
#define L 1.0       // Length of the rod
#define T 0.1       // Total time
#define alpha 0.01  // Thermal diffusivity
#define NX 100      // Number of spatial points
#define NT 1000     // Number of time points
#define DX (L/(NX-1))
#define DT (T/(NT-1))
#define M_PI 3.14159265358979323846  // Define M_PI manually

void initialize(double* u) {
    // Initialize with initial conditions, e.g., u(x, 0) = sin(pi * x)
    for (int i = 0; i < NX; i++) {
        double x = i * DX;
        u[i] = sin(M_PI * x);
    }
}

void solve_heat_equation(double* u, double* u_new) {
    // Iterate over time steps
    for (int n = 0; n < NT; n++) {
        #pragma omp parallel for
        // Update temperature values
        for (int i = 1; i < NX - 1; i++) {
            u_new[i] = u[i] + alpha * DT / (DX * DX) * (u[i + 1] - 2 * u[i] + u[i - 1]);
        }
        
        // Swap pointers to avoid copying arrays
        double* temp = u;
        u = u_new;
        u_new = temp;
    }
}

int main() {
    double* u = (double*)malloc(NX * sizeof(double));
    double* u_new = (double*)malloc(NX * sizeof(double));

    initialize(u);

    // Set the number of threads to use for parallel regions
    omp_set_num_threads(4);

    double start_time = omp_get_wtime();
    solve_heat_equation(u, u_new);
    double end_time = omp_get_wtime();

    // Print the final temperature distribution
    for (int i = 0; i < NX; i++) {
        printf("%f\n", u[i]);
    }

    printf("Elapsed time: %f seconds\n", end_time - start_time);

    free(u);
    free(u_new);
    return 0;
}
